<?php

namespace ContainerI1Luur3;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSchedulerCommandSubscriberService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Dukecity\CommandSchedulerBundle\EventSubscriber\SchedulerCommandSubscriber' shared autowired service.
     *
     * @return \Dukecity\CommandSchedulerBundle\EventSubscriber\SchedulerCommandSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/dukecity/command-scheduler-bundle/EventSubscriber/SchedulerCommandSubscriber.php';

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['Dukecity\\CommandSchedulerBundle\\EventSubscriber\\SchedulerCommandSubscriber'])) {
            return $container->services['Dukecity\\CommandSchedulerBundle\\EventSubscriber\\SchedulerCommandSubscriber'];
        }

        return $container->services['Dukecity\\CommandSchedulerBundle\\EventSubscriber\\SchedulerCommandSubscriber'] = new \Dukecity\CommandSchedulerBundle\EventSubscriber\SchedulerCommandSubscriber(($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), $a, NULL, NULL, [], 'cronjob monitoring %s, %s', NULL, true, true);
    }
}
