<?php

namespace ContainerI1Luur3;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMonitorCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Dukecity\CommandSchedulerBundle\Command\MonitorCommand' shared autowired service.
     *
     * @return \Dukecity\CommandSchedulerBundle\Command\MonitorCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/dukecity/command-scheduler-bundle/Command/MonitorCommand.php';

        $container->services['Dukecity\\CommandSchedulerBundle\\Command\\MonitorCommand'] = $instance = new \Dukecity\CommandSchedulerBundle\Command\MonitorCommand(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->privates['time.datetime_formatter'] ?? $container->load('getTime_DatetimeFormatterService')), 'default', false, [], 'cronjob monitoring %s, %s', false);

        $instance->setName('scheduler:monitor');
        $instance->setDescription('Monitor scheduled commands');

        return $instance;
    }
}
